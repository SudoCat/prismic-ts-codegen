{"version":3,"file":"cli.mjs","sources":["../node_modules/@prismicio/types/dist/index.js","../src/lib/pascalCase.ts","../src/lib/buildSharedSliceInterfaceName.ts","../src/lib/addInterfacePropertiesForFields.ts","../src/addTypeAliasForCustomType.ts","../src/addTypeAliasForSharedSlice.ts","../src/constants.ts","../src/createTypesFile.ts","../src/lib/formatBlankLines.ts","../src/lib/formatFileText.ts","../src/lib/getSourceFileText.ts","../src/cli/index.ts"],"sourcesContent":["const RichTextNodeType = {\n  heading1: \"heading1\",\n  heading2: \"heading2\",\n  heading3: \"heading3\",\n  heading4: \"heading4\",\n  heading5: \"heading5\",\n  heading6: \"heading6\",\n  paragraph: \"paragraph\",\n  preformatted: \"preformatted\",\n  strong: \"strong\",\n  em: \"em\",\n  listItem: \"list-item\",\n  oListItem: \"o-list-item\",\n  list: \"group-list-item\",\n  oList: \"group-o-list-item\",\n  image: \"image\",\n  embed: \"embed\",\n  hyperlink: \"hyperlink\",\n  label: \"label\",\n  span: \"span\"\n};\nconst LinkType = {\n  Any: \"Any\",\n  Document: \"Document\",\n  Media: \"Media\",\n  Web: \"Web\"\n};\nconst EmbedType = {\n  Link: \"link\",\n  Rich: \"rich\"\n};\n\nconst CustomTypeModelFieldType = {\n  Boolean: \"Boolean\",\n  Color: \"Color\",\n  Date: \"Date\",\n  Embed: \"Embed\",\n  GeoPoint: \"GeoPoint\",\n  Group: \"Group\",\n  Image: \"Image\",\n  IntegrationFields: \"IntegrationFields\",\n  Link: \"Link\",\n  Number: \"Number\",\n  Select: \"Select\",\n  Slices: \"Slices\",\n  StructuredText: \"StructuredText\",\n  Text: \"Text\",\n  Timestamp: \"Timestamp\",\n  UID: \"UID\"\n};\nconst CustomTypeModelLinkSelectType = {\n  Document: \"document\",\n  Media: \"media\"\n};\nconst CustomTypeModelSliceDisplay = {\n  List: \"list\",\n  Grid: \"grid\"\n};\nconst CustomTypeModelSliceType = {\n  Slice: \"Slice\",\n  SharedSlice: \"SharedSlice\"\n};\n\nexport { CustomTypeModelFieldType, CustomTypeModelLinkSelectType, CustomTypeModelSliceDisplay, CustomTypeModelSliceType, EmbedType, LinkType, RichTextNodeType };\n//# sourceMappingURL=index.js.map\n","import {\n\tpascalCase as pascalCaseBase,\n\tpascalCaseTransformMerge,\n} from \"pascal-case\";\n\nexport const pascalCase = (input: string): string =>\n\tpascalCaseBase(input, {\n\t\ttransform: pascalCaseTransformMerge,\n\t});\n","import { pascalCase } from \"./pascalCase\";\n\ntype BuildSharedSliceInterfaceNameConfig = {\n\tid: string;\n};\n\nexport const buildSharedSliceInterfaceName = (\n\tconfig: BuildSharedSliceInterfaceNameConfig,\n): string => {\n\treturn pascalCase(`${config.id} Slice`);\n};\n","import type {\n\tCustomTypeModel,\n\tCustomTypeModelField,\n\tSharedSliceModel,\n} from \"@prismicio/types\";\nimport {\n\tCustomTypeModelSliceType,\n\tCustomTypeModelLinkSelectType,\n} from \"@prismicio/types\";\nimport type {\n\tInterfaceDeclaration,\n\tJSDocableNodeStructure,\n\tSourceFile,\n} from \"ts-morph\";\n\nimport { buildSharedSliceInterfaceName } from \"./buildSharedSliceInterfaceName\";\nimport { pascalCase } from \"./pascalCase\";\n\ntype BuildFieldDocsConfig = {\n\tfield: CustomTypeModelField;\n};\n\nconst buildFieldDocs = (\n\tconfig: BuildFieldDocsConfig,\n): NonNullable<JSDocableNodeStructure[\"docs\"]> => {\n\treturn [\n\t\t{\n\t\t\tdescription: (writer) => {\n\t\t\t\tif (\"label\" in config.field.config && config.field.config.label) {\n\t\t\t\t\twriter.write(`${config.field.config.label} field`);\n\t\t\t\t}\n\n\t\t\t\twriter.spaceIfLastNot();\n\t\t\t\twriter.write(`(type: ${config.field.type})`);\n\t\t\t\twriter.writeLine(\"\");\n\n\t\t\t\tif (\n\t\t\t\t\t\"placeholder\" in config.field.config &&\n\t\t\t\t\tconfig.field.config.placeholder\n\t\t\t\t) {\n\t\t\t\t\twriter.writeLine(`Placeholder: ${config.field.config.placeholder}`);\n\t\t\t\t}\n\n\t\t\t\tif (\"catalog\" in config.field.config) {\n\t\t\t\t\twriter.writeLine(`Catalog: ${config.field.config.catalog}`);\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t];\n};\n\ntype AddInterfacePropertyFromFieldConfig = {\n\tname: string;\n\tfield: CustomTypeModelField;\n\tinterface: InterfaceDeclaration;\n\tsourceFile: SourceFile;\n\trootModel: CustomTypeModel | SharedSliceModel;\n};\n\nconst addInterfacePropertyFromField = (\n\tconfig: AddInterfacePropertyFromFieldConfig,\n) => {\n\tswitch (config.field.type) {\n\t\tcase \"UID\": {\n\t\t\t// UID fields are not included in Data.\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"Boolean\": {\n\t\t\tconfig.interface.addProperty({\n\t\t\t\tname: config.name,\n\t\t\t\ttype: \"prismicT.BooleanField\",\n\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t});\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"Color\": {\n\t\t\tconfig.interface.addProperty({\n\t\t\t\tname: config.name,\n\t\t\t\ttype: \"prismicT.ColorField\",\n\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t});\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"Date\": {\n\t\t\tconfig.interface.addProperty({\n\t\t\t\tname: config.name,\n\t\t\t\ttype: \"prismicT.DateField\",\n\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t});\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"Embed\": {\n\t\t\tconfig.interface.addProperty({\n\t\t\t\tname: config.name,\n\t\t\t\ttype: \"prismicT.EmbedField\",\n\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t});\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"GeoPoint\": {\n\t\t\tconfig.interface.addProperty({\n\t\t\t\tname: config.name,\n\t\t\t\ttype: \"prismicT.GeoPointField\",\n\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t});\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"Image\": {\n\t\t\tif (config.field.config.thumbnails.length > 0) {\n\t\t\t\tconst thumbnailNames = config.field.config.thumbnails\n\t\t\t\t\t.map((thumbnail) => `\"${thumbnail.name}\"`)\n\t\t\t\t\t.join(\" | \");\n\n\t\t\t\tconfig.interface.addProperty({\n\t\t\t\t\tname: config.name,\n\t\t\t\t\ttype: `prismicT.ImageField<${thumbnailNames}>`,\n\t\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconfig.interface.addProperty({\n\t\t\t\t\tname: config.name,\n\t\t\t\t\ttype: \"prismicT.ImageField\",\n\t\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"IntegrationFields\": {\n\t\t\tconfig.interface.addProperty({\n\t\t\t\tname: config.name,\n\t\t\t\ttype: \"prismicT.IntegrationFields\",\n\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t});\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"Link\": {\n\t\t\tswitch (config.field.config.select) {\n\t\t\t\tcase CustomTypeModelLinkSelectType.Document: {\n\t\t\t\t\tconfig.interface.addProperty({\n\t\t\t\t\t\tname: config.name,\n\t\t\t\t\t\ttype:\n\t\t\t\t\t\t\tconfig.field.config.customtypes &&\n\t\t\t\t\t\t\tconfig.field.config.customtypes.length > 0\n\t\t\t\t\t\t\t\t? `prismicT.RelationField<${config.field.config.customtypes\n\t\t\t\t\t\t\t\t\t\t.map((type) => `\"${type}\"`)\n\t\t\t\t\t\t\t\t\t\t.join(\" | \")}>`\n\t\t\t\t\t\t\t\t: \"prismicT.RelationField\",\n\t\t\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t\t\t});\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase CustomTypeModelLinkSelectType.Media: {\n\t\t\t\t\tconfig.interface.addProperty({\n\t\t\t\t\t\tname: config.name,\n\t\t\t\t\t\ttype: \"prismicT.LinkToMediaField\",\n\t\t\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t\t\t});\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tdefault: {\n\t\t\t\t\tconfig.interface.addProperty({\n\t\t\t\t\t\tname: config.name,\n\t\t\t\t\t\ttype: \"prismicT.LinkField\",\n\t\t\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"Number\": {\n\t\t\tconfig.interface.addProperty({\n\t\t\t\tname: config.name,\n\t\t\t\ttype: \"prismicT.NumberField\",\n\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t});\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"StructuredText\": {\n\t\t\tconst isTitleField =\n\t\t\t\t\"single\" in config.field.config &&\n\t\t\t\tconfig.field.config.single\n\t\t\t\t\t.split(\",\")\n\t\t\t\t\t.every((blockType) => /heading/.test(blockType));\n\n\t\t\tif (isTitleField) {\n\t\t\t\tconfig.interface.addProperty({\n\t\t\t\t\tname: config.name,\n\t\t\t\t\ttype: \"prismicT.TitleField\",\n\t\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconfig.interface.addProperty({\n\t\t\t\t\tname: config.name,\n\t\t\t\t\ttype: \"prismicT.RichTextField\",\n\t\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"Select\": {\n\t\t\tconst options = config.field.config.options\n\t\t\t\t.map((option) => `\"${option}\"`)\n\t\t\t\t.join(\" | \");\n\t\t\tconst hasDefault = Boolean(config.field.config.default_value);\n\n\t\t\tif (hasDefault) {\n\t\t\t\tconfig.interface.addProperty({\n\t\t\t\t\tname: config.name,\n\t\t\t\t\ttype: `prismicT.SelectField<${options}, \"filled\">`,\n\t\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconfig.interface.addProperty({\n\t\t\t\t\tname: config.name,\n\t\t\t\t\ttype: `prismicT.SelectField<${options}>`,\n\t\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"Text\": {\n\t\t\tconfig.interface.addProperty({\n\t\t\t\tname: config.name,\n\t\t\t\ttype: \"prismicT.KeyTextField\",\n\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t});\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"Timestamp\": {\n\t\t\tconfig.interface.addProperty({\n\t\t\t\tname: config.name,\n\t\t\t\ttype: \"prismicT.TimestampField\",\n\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t});\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"Group\": {\n\t\t\tconst itemInterface = config.sourceFile.addInterface({\n\t\t\t\tname: pascalCase(\n\t\t\t\t\t`${config.rootModel.id} Document Data ${config.name} Item`,\n\t\t\t\t),\n\t\t\t});\n\t\t\taddInterfacePropertiesForFields({\n\t\t\t\tinterface: itemInterface,\n\t\t\t\tsourceFile: config.sourceFile,\n\t\t\t\tfields: config.field.config.fields,\n\t\t\t\trootModel: config.rootModel,\n\t\t\t});\n\n\t\t\tconfig.interface.addProperty({\n\t\t\t\tname: config.name,\n\t\t\t\ttype: `prismicT.GroupField<Simplify<${itemInterface.getName()}>>`,\n\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t});\n\n\t\t\tbreak;\n\t\t}\n\n\t\tcase \"Slices\": {\n\t\t\tconst choiceInterfaceNames: string[] = [];\n\n\t\t\tfor (const choiceId in config.field.config.choices) {\n\t\t\t\tconst choice = config.field.config.choices[choiceId];\n\n\t\t\t\tif (choice.type === CustomTypeModelSliceType.SharedSlice) {\n\t\t\t\t\tchoiceInterfaceNames.push(\n\t\t\t\t\t\tbuildSharedSliceInterfaceName({ id: choiceId }),\n\t\t\t\t\t);\n\t\t\t\t} else if (choice.type === CustomTypeModelSliceType.Slice) {\n\t\t\t\t\tlet primaryInterface: InterfaceDeclaration | undefined;\n\t\t\t\t\tif (Object.keys(choice[\"non-repeat\"]).length > 0) {\n\t\t\t\t\t\tprimaryInterface = config.sourceFile.addInterface({\n\t\t\t\t\t\t\tname: pascalCase(\n\t\t\t\t\t\t\t\t`${config.rootModel.id} Document Data ${config.name} ${choiceId} Slice Primary`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t});\n\t\t\t\t\t\taddInterfacePropertiesForFields({\n\t\t\t\t\t\t\tinterface: primaryInterface,\n\t\t\t\t\t\t\tsourceFile: config.sourceFile,\n\t\t\t\t\t\t\tfields: choice[\"non-repeat\"],\n\t\t\t\t\t\t\trootModel: config.rootModel,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tlet itemInterface: InterfaceDeclaration | undefined;\n\t\t\t\t\tif (Object.keys(choice.repeat).length > 0) {\n\t\t\t\t\t\tconst itemInterface = config.sourceFile.addInterface({\n\t\t\t\t\t\t\tname: pascalCase(\n\t\t\t\t\t\t\t\t`${config.rootModel.id} Document Data ${config.name} ${choiceId} Slice Item`,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t});\n\t\t\t\t\t\taddInterfacePropertiesForFields({\n\t\t\t\t\t\t\tinterface: itemInterface,\n\t\t\t\t\t\t\tsourceFile: config.sourceFile,\n\t\t\t\t\t\t\tfields: choice.repeat,\n\t\t\t\t\t\t\trootModel: config.rootModel,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tconst sliceType = config.sourceFile.addTypeAlias({\n\t\t\t\t\t\tname: pascalCase(\n\t\t\t\t\t\t\t`${config.rootModel.id} Document Data ${config.name} ${choiceId} Slice`,\n\t\t\t\t\t\t),\n\t\t\t\t\t\ttype: `prismicT.Slice<\"${choiceId}\", ${\n\t\t\t\t\t\t\tprimaryInterface\n\t\t\t\t\t\t\t\t? `Simplify<${primaryInterface.getName()}>`\n\t\t\t\t\t\t\t\t: \"Record<string, never>\"\n\t\t\t\t\t\t}, ${\n\t\t\t\t\t\t\titemInterface ? `Simplify<${itemInterface.getName()}>` : \"never\"\n\t\t\t\t\t\t}>`,\n\t\t\t\t\t});\n\n\t\t\t\t\tchoiceInterfaceNames.push(sliceType.getName());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst slicesType = config.sourceFile.addTypeAlias({\n\t\t\t\tname: pascalCase(\n\t\t\t\t\t`${config.rootModel.id} Document Data ${config.name} Slice`,\n\t\t\t\t),\n\t\t\t\ttype:\n\t\t\t\t\tchoiceInterfaceNames.length > 0\n\t\t\t\t\t\t? choiceInterfaceNames.join(\" | \")\n\t\t\t\t\t\t: \"never\",\n\t\t\t});\n\n\t\t\tconfig.interface.addProperty({\n\t\t\t\tname: config.name,\n\t\t\t\ttype: `prismicT.SliceZone<${slicesType.getName()}>`,\n\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t});\n\n\t\t\tbreak;\n\t\t}\n\n\t\tdefault: {\n\t\t\tconfig.interface.addProperty({\n\t\t\t\tname: config.name,\n\t\t\t\ttype: \"unknown\",\n\t\t\t\tdocs: buildFieldDocs({ field: config.field }),\n\t\t\t});\n\t\t}\n\t}\n};\n\ntype AddInterfacePropertiesForFieldsConfig = Omit<\n\tAddInterfacePropertyFromFieldConfig,\n\t\"name\" | \"field\"\n> & {\n\tfields: Record<string, AddInterfacePropertyFromFieldConfig[\"field\"]>;\n};\n\nexport const addInterfacePropertiesForFields = (\n\tconfig: AddInterfacePropertiesForFieldsConfig,\n) => {\n\tfor (const name in config.fields) {\n\t\taddInterfacePropertyFromField({\n\t\t\t...config,\n\t\t\tname,\n\t\t\tfield: config.fields[name],\n\t\t});\n\t}\n};\n","import type { CustomTypeModel, CustomTypeModelField } from \"@prismicio/types\";\nimport type { SourceFile, TypeAliasDeclaration } from \"ts-morph\";\n\nimport { addInterfacePropertiesForFields } from \"./lib/addInterfacePropertiesForFields\";\nimport { pascalCase } from \"./lib/pascalCase\";\n\nconst collectCustomTypeFields = (\n\tmodel: CustomTypeModel,\n): Record<string, CustomTypeModelField> => {\n\treturn Object.assign({}, ...Object.values(model.json));\n};\n\ntype AddTypeAliasForCustomTypeConfig = {\n\tmodel: CustomTypeModel;\n\tsourceFile: SourceFile;\n};\n\nexport const addTypeAliasForCustomType = (\n\tconfig: AddTypeAliasForCustomTypeConfig,\n): TypeAliasDeclaration => {\n\tconst fields = collectCustomTypeFields(config.model);\n\tconst hasUIDField = \"uid\" in fields;\n\n\tconst dataInterface = config.sourceFile.addInterface({\n\t\tname: pascalCase(`${config.model.id} Document Data`),\n\t});\n\taddInterfacePropertiesForFields({\n\t\tfields,\n\t\tinterface: dataInterface,\n\t\tsourceFile: config.sourceFile,\n\t\trootModel: config.model,\n\t});\n\n\treturn config.sourceFile.addTypeAlias({\n\t\tname: pascalCase(`${config.model.id} Document`),\n\t\ttypeParameters: [\n\t\t\t{\n\t\t\t\tname: \"Lang\",\n\t\t\t\tconstraint: \"string\",\n\t\t\t\tdefault: \"string\",\n\t\t\t},\n\t\t],\n\t\ttype: hasUIDField\n\t\t\t? `prismicT.PrismicDocumentWithUID<${dataInterface.getName()}, \"${\n\t\t\t\t\tconfig.model.id\n\t\t\t  }\", Lang>`\n\t\t\t: `prismicT.PrismicDocumentWithoutUID<${dataInterface.getName()}, \"${\n\t\t\t\t\tconfig.model.id\n\t\t\t  }\", Lang>`,\n\t\tdocs: [\n\t\t\t{\n\t\t\t\tdescription: `${config.model.label} Prismic document (API ID: \\`${config.model.id}\\`)`,\n\t\t\t\ttags: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttagName: \"typeParam\",\n\t\t\t\t\t\ttext: \"Lang - Language API ID of the document.\",\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t\tisExported: true,\n\t});\n};\n","import type { SharedSliceModel } from \"@prismicio/types\";\nimport type {\n\tInterfaceDeclaration,\n\tSourceFile,\n\tTypeAliasDeclaration,\n} from \"ts-morph\";\nimport { stripIndent } from \"common-tags\";\n\nimport { addInterfacePropertiesForFields } from \"./lib/addInterfacePropertiesForFields\";\nimport { buildSharedSliceInterfaceName } from \"./lib/buildSharedSliceInterfaceName\";\nimport { pascalCase } from \"./lib/pascalCase\";\n\ntype AddTypeAliasForSharedSliceConfig = {\n\tmodel: SharedSliceModel;\n\tsourceFile: SourceFile;\n};\n\nexport const addTypeAliasForSharedSlice = (\n\tconfig: AddTypeAliasForSharedSliceConfig,\n): TypeAliasDeclaration => {\n\tconst variationTypeNames: string[] = [];\n\n\tfor (const variation of config.model.variations) {\n\t\tlet primaryInterface: InterfaceDeclaration | undefined;\n\t\tif (Object.keys(variation.primary).length > 0) {\n\t\t\tprimaryInterface = config.sourceFile.addInterface({\n\t\t\t\tname: pascalCase(\n\t\t\t\t\t`${buildSharedSliceInterfaceName({ id: config.model.id })} ${\n\t\t\t\t\t\tvariation.id\n\t\t\t\t\t} Primary`,\n\t\t\t\t),\n\t\t\t});\n\t\t\taddInterfacePropertiesForFields({\n\t\t\t\tinterface: primaryInterface,\n\t\t\t\tsourceFile: config.sourceFile,\n\t\t\t\tfields: variation.primary,\n\t\t\t\trootModel: config.model,\n\t\t\t});\n\t\t}\n\n\t\tlet itemInterface: InterfaceDeclaration | undefined;\n\t\tif (Object.keys(variation.items).length > 0) {\n\t\t\titemInterface = config.sourceFile.addInterface({\n\t\t\t\tname: pascalCase(\n\t\t\t\t\t`${buildSharedSliceInterfaceName({ id: config.model.id })} ${\n\t\t\t\t\t\tvariation.id\n\t\t\t\t\t} Item`,\n\t\t\t\t),\n\t\t\t});\n\t\t\taddInterfacePropertiesForFields({\n\t\t\t\tinterface: itemInterface,\n\t\t\t\tsourceFile: config.sourceFile,\n\t\t\t\tfields: variation.items,\n\t\t\t\trootModel: config.model,\n\t\t\t});\n\t\t}\n\n\t\tconst variationType = config.sourceFile.addTypeAlias({\n\t\t\tname: pascalCase(\n\t\t\t\t`${buildSharedSliceInterfaceName({\n\t\t\t\t\tid: config.model.id,\n\t\t\t\t})} ${variation.id}`,\n\t\t\t),\n\t\t\ttype: `prismicT.SharedSliceVariation<\"${variation.id}\", ${\n\t\t\t\tprimaryInterface\n\t\t\t\t\t? `Simplify<${primaryInterface.getName()}>`\n\t\t\t\t\t: \"Record<string, never>\"\n\t\t\t}, ${itemInterface ? `Simplify<${itemInterface.getName()}>` : \"never\"}>`,\n\t\t});\n\n\t\tvariationTypeNames.push(variationType.getName());\n\t}\n\n\treturn config.sourceFile.addTypeAlias({\n\t\tname: pascalCase(\n\t\t\tbuildSharedSliceInterfaceName({\n\t\t\t\tid: config.model.id,\n\t\t\t}),\n\t\t),\n\t\ttype:\n\t\t\tvariationTypeNames.length > 0\n\t\t\t\t? `prismicT.SharedSlice<\"${config.model.id}\", ${variationTypeNames.join(\n\t\t\t\t\t\t\" | \",\n\t\t\t\t  )}>`\n\t\t\t\t: \"never\",\n\t\tdocs: [\n\t\t\t{\n\t\t\t\tdescription: stripIndent`\n\t\t\t\t\t\"${config.model.name}\" Prismic Shared Slice (API ID: \\`${config.model.id}\\`)\n\n\t\t\t\t\tDescription: ${config.model.description}\n\t\t\t\t`,\n\t\t\t},\n\t\t],\n\t\tisExported: true,\n\t});\n};\n","import { stripIndent } from \"common-tags\";\n\nexport const BLANK_LINE_IDENTIFIER = \"// ___BLANK_LINE_TO_BE_REPLACED___\";\n\nexport const NON_EDITABLE_FILE_HEADER = stripIndent`\n\t// Code generated by prismic-typescript-generator. DO NOT EDIT.\n\t${BLANK_LINE_IDENTIFIER}\n`;\n","import type { CustomTypeModel, SharedSliceModel } from \"@prismicio/types\";\nimport type { Project, SourceFile } from \"ts-morph\";\n\nimport { BLANK_LINE_IDENTIFIER, NON_EDITABLE_FILE_HEADER } from \"./constants\";\nimport { addTypeAliasForCustomType } from \"./addTypeAliasForCustomType\";\nimport { addTypeAliasForSharedSlice } from \"./addTypeAliasForSharedSlice\";\n\ntype CreateTypesFileConfig = {\n\tproject: Project;\n\tcustomTypeModels: CustomTypeModel[];\n\tsharedSliceModels: SharedSliceModel[];\n};\n\nexport const createTypesFile = (config: CreateTypesFileConfig): SourceFile => {\n\tconst sourceFile = config.project.createSourceFile(\"types.d.ts\");\n\n\tsourceFile.addImportDeclaration({\n\t\tmoduleSpecifier: \"@prismicio/types\",\n\t\tnamespaceImport: \"prismicT\",\n\t\tisTypeOnly: true,\n\t\tleadingTrivia: NON_EDITABLE_FILE_HEADER,\n\t});\n\n\tsourceFile.addStatements(BLANK_LINE_IDENTIFIER);\n\n\tsourceFile.addTypeAlias({\n\t\tname: \"Simplify\",\n\t\ttypeParameters: [\n\t\t\t{\n\t\t\t\tname: \"T\",\n\t\t\t},\n\t\t],\n\t\ttype: `{ [KeyType in keyof T]: T[KeyType] }`,\n\t});\n\n\tfor (const model of config.customTypeModels) {\n\t\taddTypeAliasForCustomType({ model, sourceFile });\n\t}\n\n\tfor (const model of config.sharedSliceModels) {\n\t\taddTypeAliasForSharedSlice({ model, sourceFile });\n\t}\n\n\treturn sourceFile;\n};\n","import { BLANK_LINE_IDENTIFIER } from \"../constants\";\n\nexport const formatBlankLines = (input: string): string => {\n\treturn input.replace(new RegExp(BLANK_LINE_IDENTIFIER, \"g\"), \"\");\n};\n","import prettier from \"prettier\";\n\nimport { formatBlankLines } from \"./formatBlankLines\";\n\nexport const formatFileText = (input: string) => {\n\treturn prettier.format(formatBlankLines(input), {\n\t\tparser: \"typescript\",\n\t});\n};\n","import * as tsm from \"ts-morph\";\n\nimport { formatFileText } from \"./formatFileText\";\n\nexport const getSourceFileText = (sourceFile: tsm.SourceFile): string => {\n\tconst text = sourceFile.print();\n\n\treturn formatFileText(text);\n};\n","import { readFileSync, writeFileSync } from \"fs\";\nimport { resolve as resolvePath } from \"path\";\nimport { Project } from \"ts-morph\";\nimport fg from \"fast-glob\";\nimport meow from \"meow\";\nimport type { CustomTypeModel, SharedSliceModel } from \"@prismicio/types\";\n\nimport { createTypesFile } from \"../index\";\nimport { getSourceFileText } from \"../lib/getSourceFileText\";\n\nconst cli = meow(\n\t`\n\tUsage\n\t  $ prismic-typegen\n\n\tOptions\n\t  --customTypes, -c   Paths to Custom Type JSON models (supports globs)\n\t  --sharedSlices, -s  Paths to Shared Slice JSON models (supports globs)\n\t  --write, -w         Write generated types to a file\n\t`,\n\t{\n\t\timportMeta: import.meta,\n\t\tflags: {\n\t\t\tcustomTypes: {\n\t\t\t\ttype: \"string\",\n\t\t\t\talias: \"c\",\n\t\t\t},\n\t\t\tsharedSlices: {\n\t\t\t\ttype: \"string\",\n\t\t\t\talias: \"s\",\n\t\t\t},\n\t\t\twrite: {\n\t\t\t\ttype: \"string\",\n\t\t\t\talias: \"w\",\n\t\t\t},\n\t\t},\n\t},\n);\n\nconst readModelsFromGlobs = async <\n\tModel extends CustomTypeModel | SharedSliceModel,\n>(\n\tglobs: string,\n): Promise<Model[]> => {\n\tconst paths = await fg(globs.split(\",\").map((path) => path.trim()));\n\n\treturn paths.map((path): Model => {\n\t\tconst raw = readFileSync(path, \"utf8\");\n\n\t\treturn JSON.parse(raw);\n\t});\n};\n\nconst main = async () => {\n\tconst customTypeModels = cli.flags.customTypes\n\t\t? await readModelsFromGlobs<CustomTypeModel>(cli.flags.customTypes)\n\t\t: [];\n\n\tconst sharedSliceModels = cli.flags.sharedSlices\n\t\t? await readModelsFromGlobs<SharedSliceModel>(cli.flags.sharedSlices)\n\t\t: [];\n\n\tconst project = new Project();\n\n\tconst typesFile = createTypesFile({\n\t\tproject,\n\t\tcustomTypeModels,\n\t\tsharedSliceModels,\n\t});\n\n\tconst contents = getSourceFileText(typesFile);\n\n\tif (cli.flags.write) {\n\t\twriteFileSync(resolvePath(cli.flags.write), contents);\n\t} else {\n\t\tconsole.log(contents);\n\t}\n};\n\nmain().catch((error) => console.error(error));\n"],"names":["pascalCaseBase","resolvePath"],"mappings":"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"}